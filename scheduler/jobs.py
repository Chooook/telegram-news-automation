import logging
import random
from datetime import datetime, timedelta
from parsers.main_parser import run_parsing
from search.embeddings import update_embeddings, generate_embedding
from rag.weekly_summary import create_weekly_summary
from utils.config import TELEGRAM_CHANNEL
import httpx
from database.db_manager import (
    get_setting, set_setting, find_similar_articles,
    get_published_links, add_published_link, get_articles_by_date_range
)
from utils.telegram_web import send_web_message

logger = logging.getLogger(__name__)

async def scheduled_parsing(client, pool):
    """Job to run parsing of all sources."""
    logger.info("Scheduler: Running scheduled parsing...")
    await run_parsing(client, pool)
    logger.info("Scheduler: Scheduled parsing finished.")

async def scheduled_embedding_update(pool):
    """Job to update embeddings for new articles."""
    logger.info("Scheduler: Running scheduled embedding update...")
    await update_embeddings(pool)
    logger.info("Scheduler: Scheduled embedding update finished.")

WEEKLY_THEMES = [
    {
        "title": "ü§ñ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
        "description": "–ò—Å—Å–ª–µ–¥—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π."
    },
    {
        "title": "üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö",
        "description": "–í—Å–µ –æ —Å–±–æ—Ä–µ, –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏ –∞–Ω–∞–ª–∏–∑–µ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö."
    },
    {
        "title": "üß† –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
        "description": "–ù–æ–≤–æ—Å—Ç–∏ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞."
    },
    {
        "title": "üîç –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ",
        "description": "–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –¥—Ä—É–≥–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è."
    },
    {
        "title": "üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞",
        "description": "NLP, —á–∞—Ç-–±–æ—Ç—ã, –º–∞—à–∏–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∏ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏."
    },
    {
        "title": "‚ö°Ô∏è –ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏",
        "description": "DALL-E, GPT –∏ –¥—Ä—É–≥–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏, –º–µ–Ω—è—é—â–∏–µ –Ω–∞—à–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–µ."
    },
    {
        "title": "ü§ù –ò–ò –≤ –±–∏–∑–Ω–µ—Å–µ",
        "description": "–ö–∞–∫ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å."
    },
    {
        "title": "üîÆ –ë—É–¥—É—â–µ–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
        "description": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–Ω–¥—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –±—É–¥—É—â–µ–µ."
    }
]

async def set_weekly_theme(pool):
    """Set a new random weekly theme with description and hashtags."""
    try:
        # Get the last used theme indices to avoid repetition
        last_theme_indices = await get_setting(pool, 'last_theme_indices')
        last_theme_indices = [int(x) for x in last_theme_indices.split(',')] if last_theme_indices else []

        # Get available theme indices
        available_indices = [i for i in range(len(WEEKLY_THEMES)) if i not in last_theme_indices]

        # If all themes were used, reset
        if not available_indices:
            available_indices = list(range(len(WEEKLY_THEMES)))
            last_theme_indices = []

        # Select random theme
        theme_index = random.choice(available_indices)
        theme = WEEKLY_THEMES[theme_index]

        # Update last theme indices (keep last 3)
        new_last_indices = [str(theme_index)] + [str(i) for i in last_theme_indices[:2]]
        await set_setting(pool, 'last_theme_indices', ','.join(new_last_indices))

        # Save current theme
        await set_setting(pool, 'weekly_theme', theme['title'])
        await set_setting(pool, 'weekly_theme_description', theme['description'])

        # Generate relevant hashtags based on theme
        hashtags = {
            'ü§ñ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ': '#–ú–∞—à–∏–Ω–Ω–æ–µ–û–±—É—á–µ–Ω–∏–µ #–ù–µ–π—Ä–æ–Ω–Ω—ã–µ–°–µ—Ç–∏ #AI',
            'üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö': '#–ê–Ω–∞–ª–∏–∑–î–∞–Ω–Ω—ã—Ö #BigData #DataScience',
            'üß† –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç': '#–ò–ò #–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç #AI',
            'üîç –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ': '#ComputerVision #–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–û–±—Ä–∞–∑–æ–≤',
            'üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞': '#NLP #–ß–∞—Ç–ë–æ—Ç—ã #–Ø–∑—ã–∫–æ–≤—ã–µ–ú–æ–¥–µ–ª–∏',
            '‚ö°Ô∏è –ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏': '#–ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ–ú–æ–¥–µ–ª–∏ #DALLE #GPT',
            'ü§ù –ò–ò –≤ –±–∏–∑–Ω–µ—Å–µ': '#–ò–ò–≤–ë–∏–∑–Ω–µ—Å–µ #–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ #–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏',
            'üîÆ –ë—É–¥—É—â–µ–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π': '#–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏–ë—É–¥—É—â–µ–≥–æ #–¢—Ä–µ–Ω–¥—ã2024'
        }.get(theme['title'], '#–ò–ò #–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ #–ù–∞—É–∫–∞')

        # Create engaging announcement
        emojis = ['üöÄ', 'üåü', 'üîç', 'üìö', 'üß†', 'üí°', 'üéØ', 'üìà']
        emoji = random.choice(emojis)

        announcement = (
            f"{emoji} *{theme['title']}* {emoji}\n\n"
            f"{theme['description']}\n\n"
            f"üìÖ *–ü–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é:*\n"
            f"‚Ä¢ –í—Ç-–ß—Ç: –£—Ç—Ä–µ–Ω–Ω–∏–µ –∏ –≤–µ—á–µ—Ä–Ω–∏–µ –ø–æ—Å—Ç—ã –ø–æ —Ç–µ–º–µ\n"
            f"‚Ä¢ –ü—Ç: –ò—Ç–æ–≥–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –Ω–µ–¥–µ–ª–∏\n\n"
            f"{hashtags}"
        )

        logger.info(f"Set new weekly theme: {theme['title']}")
        return theme['title'], announcement

    except Exception as e:
        logger.error(f"Error setting weekly theme: {e}", exc_info=True)
        # Fallback to default theme
        default_theme = "ü§ñ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"
        await set_setting(pool, 'weekly_theme', default_theme)
        return default_theme, f"üéØ –ù–æ–≤–∞—è —Ç–µ–º–∞ –Ω–µ–¥–µ–ª–∏: {default_theme}"

async def scheduled_weekly_theme(client, pool):
    """Job to set new weekly theme on Monday 9:00."""
    logger.info("Scheduler: Setting new weekly theme...")

    try:
        theme, announcement = await set_weekly_theme(pool)
        logger.info(f"Scheduler: New weekly theme set to '{theme}'")

        # Generate a more detailed theme description
        from rag.llm_utils import generate_theme_description
        theme_desc = await generate_theme_description(theme)

        # Format the announcement with the generated description
        formatted_announcement = (
            f"üéØ *–ù–æ–≤–∞—è —Ç–µ–º–∞ –Ω–µ–¥–µ–ª–∏: {theme}*\n\n"
            f"{theme_desc}\n\n"
            "–í —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏ –±—É–¥–µ–º –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ. "
            "–ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –≤–∞–∂–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!"
        )

        # Send announcement to channel
        success = await send_web_message(
            chat_id=TELEGRAM_CHANNEL,
            text=formatted_announcement,
            parse_mode='Markdown'
        )

        if not success:
            logger.error("Scheduler: Failed to send theme announcement")

    except Exception as e:
        logger.error(f"Scheduler: Error setting weekly theme: {e}", exc_info=True)
        # Try to send at least a simple message if the detailed one fails
        try:
            await send_web_message(
                chat_id=TELEGRAM_CHANNEL,
                text=f"üéØ *–ù–æ–≤–∞—è —Ç–µ–º–∞ –Ω–µ–¥–µ–ª–∏: {theme}*\n\n"
                     "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞—à–∏–º–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏!",
                parse_mode='Markdown'
            )
        except Exception as e2:
            logger.error(f"Scheduler: Failed to send fallback theme announcement: {e2}")

async def publish_scheduled_post(pool, client):
    """Publish the next scheduled post for today."""
    try:
        # Get current day and time
        now = datetime.now()
        current_day = now.weekday()  # 0 = Monday, 6 = Sunday
        current_time = now.strftime('%H:%M')

        # Get scheduled posts
        scheduled_posts = await get_setting(pool, 'scheduled_posts')
        if not scheduled_posts:
            logger.warning("No scheduled posts found")
            return False

        scheduled_posts = eval(scheduled_posts)  # Convert string back to list

        # Find posts for current day and time
        posts_to_publish = [
            p for p in scheduled_posts
            if p['day'] == current_day and p['time'] == current_time
        ]

        if not posts_to_publish:
            logger.info(f"No posts scheduled for {current_day} at {current_time}")
            return False

        # Publish all matching posts
        for post in posts_to_publish:
            article = post['article']
            post_text = f"*{article['title']}*\n\n"
            if article.get('description'):
                post_text += f"{article['description']}\n\n"
            post_text += f"üîó {article['link']}"

            await send_web_message(
                chat_id=TELEGRAM_CHANNEL,
                text=post_text,
                parse_mode='Markdown'
            )

            # Mark as published
            scheduled_posts.remove(post)
            await set_setting(pool, 'scheduled_posts', str(scheduled_posts))

        return True

    except Exception as e:
        logger.error(f"Error publishing scheduled post: {e}", exc_info=True)
        return False

async def scheduled_weekly_summary(client, pool):
    """Job to create and post a weekly summary on Friday 20:00."""
    logger.info("Scheduler: Generating weekly summary...")

    try:
        # Calculate start and end of the current week (Monday to Sunday)
        now = datetime.now()
        start_of_week = now - timedelta(days=now.weekday())  # Monday
        start_of_week = start_of_week.replace(hour=0, minute=0, second=0,
                                              microsecond=0)
        end_of_week = start_of_week + timedelta(days=6)  # Sunday
        end_of_week = end_of_week.replace(hour=23, minute=59, second=59,
                                          microsecond=999999)

        # 1. Get scheduled posts to exclude them
        scheduled_posts = await get_setting(pool, 'scheduled_posts')
        if scheduled_posts:
            scheduled_posts = eval(scheduled_posts)
            scheduled_links = {p['article']['link'] for p in scheduled_posts}
        else:
            scheduled_links = set()
            logger.info("No scheduled posts found")

        # 2. Get all articles from this week
        weekly_articles = await get_articles_by_date_range(pool, start_of_week,
                                                           end_of_week)
        if not weekly_articles:
            logger.warning("Scheduler: No articles found for the week")
            return

        # 3. Get actually published articles
        published_links = await get_published_links(pool)
        if not published_links:
            logger.warning("No published articles found for weekly summary")
            return

        # 4. Combined filtering:
        # - must be published (in published_links)
        # - must not be scheduled (not in scheduled_links)
        final_articles = [
            a for a in weekly_articles
            if
            a['link'] in published_links and a['link'] not in scheduled_links
        ]

        if not final_articles:
            logger.warning(
                "No articles available for weekly summary after filtering")
            return

        # Get theme
        theme = await get_setting(pool, 'weekly_theme') or "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏"

        logger.info(
            f"Creating weekly summary for theme '{theme}' ({len(final_articles)} articles)...")
        summary = await create_weekly_summary(theme, pool, final_articles)

        if not summary:
            logger.error("Failed to generate weekly summary content")
            return

        formatted_summary = (
            f"üìä *–ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏: {theme}*\n\n"
            f"{summary}\n\n"
            f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –±—ã–ª–∏ —Å –Ω–∞–º–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ!"
        )

        logger.info(
            f"Posting weekly summary ({len(formatted_summary)} chars)...")
        success = await send_web_message(
            chat_id=TELEGRAM_CHANNEL,
            text=formatted_summary,
            parse_mode='Markdown'
        )

        if not success:
            logger.error("Failed to post weekly summary to Telegram")

    except Exception as e:
        logger.error(f"Error in weekly summary generation: {e}", exc_info=True)
        raise

async def publish_article(article, pool):
    """Helper function to publish a single article."""
    try:
        # Check if article should be excluded
        from rag.llm_utils import should_exclude_article, generate_article_summary

        if should_exclude_article(article):
            logger.info(f"Skipping article (excluded by filters): {article.get('title', 'No title')}")
            return False

        # Clean HTML tags from title and description
        import re

        def clean_html(text):
            if not text:
                return ""
            # Remove HTML tags
            clean_text = re.sub(r'<[^>]+>', '', text)
            # Decode HTML entities
            import html
            clean_text = html.unescape(clean_text)
            return clean_text.strip()

        # Clean title and description
        clean_title = clean_html(article['title'])
        clean_description = clean_html(article.get('description', ''))

        # Generate a short summary of the article
        summary = await generate_article_summary({
            'title': clean_title,
            'description': clean_description,
            'link': article.get('link', '')
        })

        # Format message with title, summary and link
        message = (
            f"üìå *{clean_title}*\n\n"
            f"{summary}\n\n"
            f"üîó [–ß–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—å—é]({article['link']})"
        )

        # Add source if available
        if article.get('source'):
            message += f"\n\nüìå –ò—Å—Ç–æ—á–Ω–∏–∫: {article['source']}"

        # Add hashtags based on theme
        current_theme = await get_setting(pool, 'weekly_theme')
        hashtags = {
            'ü§ñ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ': '#–ú–∞—à–∏–Ω–Ω–æ–µ–û–±—É—á–µ–Ω–∏–µ #–ù–µ–π—Ä–æ–Ω–Ω—ã–µ–°–µ—Ç–∏ #AI',
            'üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö': '#–ê–Ω–∞–ª–∏–∑–î–∞–Ω–Ω—ã—Ö #BigData #DataScience',
            'üß† –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç': '#–ò–ò #–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç #AI',
            'üîç –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ': '#ComputerVision #–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–û–±—Ä–∞–∑–æ–≤',
            'üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞': '#NLP #–ß–∞—Ç–ë–æ—Ç—ã #–Ø–∑—ã–∫–æ–≤—ã–µ–ú–æ–¥–µ–ª–∏',
            '‚ö°Ô∏è –ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏': '#–ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ–ú–æ–¥–µ–ª–∏ #DALLE #GPT',
            'ü§ù –ò–ò –≤ –±–∏–∑–Ω–µ—Å–µ': '#–ò–ò–≤–ë–∏–∑–Ω–µ—Å–µ #–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ #–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏',
            'üîÆ –ë—É–¥—É—â–µ–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π': '#–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏–ë—É–¥—É—â–µ–≥–æ #–¢—Ä–µ–Ω–¥—ã2024'
        }.get(current_theme, '#–Ω–æ–≤–æ—Å—Ç–∏ #–∞–Ω–∞–ª–∏—Ç–∏–∫–∞')

        message += f"\n\n{hashtags}"

        # Send message to channel
        success = await send_web_message(
            chat_id=TELEGRAM_CHANNEL,
            text=message,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )

        if success:
            await add_published_link(pool, article['link'])
            logger.info(f"Scheduler: Successfully published post: {article['link']}")
            return True
        else:
            logger.error(f"Scheduler: Failed to publish post: {article['link']}")
            return False

    except Exception as e:
        logger.error(f"Scheduler: Error publishing article: {e}", exc_info=True)
        return False

async def scheduled_post_publication(client, pool, time_of_day=None):
    """
    Job to publish relevant articles based on the weekly theme.

    Args:
        time_of_day: 'morning' or 'evening' to select which post to publish
    """
    logger.info(f"Scheduler: Running scheduled post publication ({time_of_day or 'unspecified time'})")

    try:
        # Get current theme and its description
        theme = await get_setting(pool, 'weekly_theme')
        theme_desc = await get_setting(pool, 'weekly_theme_description')

        if not theme:
            logger.warning("Scheduler: No weekly theme set. Skipping post publication.")
            return

        # Generate embedding for the theme
        theme_embedding = await generate_embedding(theme)
        if not theme_embedding:
            logger.error("Scheduler: Failed to generate theme embedding")
            return

        # Find relevant articles (increase limit to get more variety)
        articles = await find_similar_articles(pool, theme_embedding, limit=15)
        if not articles:
            logger.warning("Scheduler: No relevant articles found for the theme")
            return

        # Filter out already published articles
        published_links = await get_published_links(pool)
        new_articles = [a for a in articles if a['link'] not in published_links]

        if not new_articles:
            logger.info("Scheduler: No new articles to publish")
            return

        # Get current day of week (0=Monday, 6=Sunday)
        day_of_week = datetime.now().weekday()

        # Select and format article based on time of day and day of week
        if time_of_day == 'morning':
            # Morning post: More technical/in-depth
            article = new_articles[0]

            # Add different intros based on day of week
            day_intros = [
                "üî• –ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ ‚Äî –≤—Ä–µ–º—è –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è!",
                "üìö –í—Ç–æ—Ä–Ω–∏–∫ ‚Äî –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è!",
                "üß† –°—Ä–µ–¥–∞ ‚Äî —Å–µ—Ä–µ–¥–∏–Ω–∞ –Ω–µ–¥–µ–ª–∏, –≤—Ä–µ–º—è —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è!",
                "üí° –ß–µ—Ç–≤–µ—Ä–≥ ‚Äî –∏–¥–µ–∞–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª—è –Ω–æ–≤—ã—Ö –∑–Ω–∞–Ω–∏–π!",
                "üöÄ –ü—è—Ç–Ω–∏—Ü–∞ ‚Äî –≥–æ—Ç–æ–≤–∏–º—Å—è –∫ –∏—Ç–æ–≥–∞–º –Ω–µ–¥–µ–ª–∏!",
                "üåü –°—É–±–±–æ—Ç–∞ ‚Äî —É—á–∏–º—Å—è –¥–∞–∂–µ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ!",
                "üåû –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ ‚Äî –≤—Ä–µ–º—è –¥–ª—è —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è!"
            ]

            intro = f"{day_intros[day_of_week]}\n\n"
            message = (
                f"{intro}"
                f"üìå *{theme}*\n"
                f"{theme_desc}\n\n"
                f"üîç *{article['title']}*\n"
                f"{article.get('description', '')}\n\n"
                f"üìñ –ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é: {article['link']}"
            )

        else:  # Evening post
            # Evening post: More engaging/entertaining
            # Select from top 5 most relevant articles
            article = random.choice(new_articles[:min(5, len(new_articles))])

            # Different formats for different days
            if day_of_week in [0, 2, 4]:  # Mon, Wed, Fri
                message = (
                    f"üåô –í–µ—á–µ—Ä–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ —Ç–µ–º–µ *{theme}*\n\n"
                    f"{random.choice(['–°–µ–≥–æ–¥–Ω—è –º—ã –Ω–∞—à–ª–∏ –¥–ª—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª:', '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∫ –ø—Ä–æ—á—Ç–µ–Ω–∏—é:', '–ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ —ç—Ç–æ–π —Ç–µ–º–µ?'])}"
                    f"\n\n*{article['title']}*\n"
                    f"{article.get('description', '')}\n\n"
                    f"üîó {article['link']}\n\n"
                    f"üí¨ –û–±—Å—É–¥–∏–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö?"
                )
            else:  # Tue, Thu, Sat, Sun
                # Add a question to engage audience
                questions = [
                    "–ö–∞–∫ –≤—ã –¥—É–º–∞–µ—Ç–µ, –∫–∞–∫ —ç—Ç–æ –∏–∑–º–µ–Ω–∏—Ç –Ω–∞—à–µ –±—É–¥—É—â–µ–µ?",
                    "–ü—Ä–∏–º–µ–Ω—è–ª–∏ –ª–∏ –≤—ã –ø–æ–¥–æ–±–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ?",
                    "–ß—Ç–æ –≤–∞—Å —É–¥–∏–≤–∏–ª–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤ —ç—Ç–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–µ?",
                    "–ö–∞–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã —Ç–µ–º—ã –≤–∞–º —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã –∏–∑—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?"
                ]

                message = (
                    f"‚ú® *{article['title']}*\n\n"
                    f"{article.get('description', '')}\n\n"
                    f"{random.choice(questions)}\n\n"
                    f"üìå –¢–µ–º–∞ –Ω–µ–¥–µ–ª–∏: {theme}\n"
                    f"üîó {article['link']}"
                )

        # Add hashtags based on theme
        hashtags = {
            'ü§ñ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ': '#ML #–ò–ò #–ú–∞—à–∏–Ω–Ω–æ–µ–û–±—É—á–µ–Ω–∏–µ #–ù–µ–π—Ä–æ—Å–µ—Ç–∏',
            'üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö': '#DataScience #BigData #–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
            'üß† –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç': '#–ò–ò #AI #–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç',
            'üîç –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ': '#ComputerVision #CV #–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ–ó—Ä–µ–Ω–∏–µ',
            'üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞': '#NLP #–ß–∞—Ç–ë–æ—Ç—ã #–Ø–∑—ã–∫–æ–≤—ã–µ–ú–æ–¥–µ–ª–∏',
            '‚ö°Ô∏è –ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏': '#–ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ–ú–æ–¥–µ–ª–∏ #DALLE #GPT',
            'ü§ù –ò–ò –≤ –±–∏–∑–Ω–µ—Å–µ': '#–ò–ò–≤–ë–∏–∑–Ω–µ—Å–µ #–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ #–°—Ç–∞—Ä—Ç–∞–ø—ã',
            'üîÆ –ë—É–¥—É—â–µ–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π': '#–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏–ë—É–¥—É—â–µ–≥–æ #–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏ #–¢—Ä–µ–Ω–¥—ã2024'
        }.get(theme, '#–ò–ò #–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ #–ù–∞—É–∫–∞')

        # Add random emoji and hashtags
        emojis = ['üí°', 'üöÄ', 'üîç', 'üìö', 'üß†', 'üéØ', 'üìà', 'ü§ñ']
        message += f"\n\n{random.choice(emojis)} {hashtags}"

        # Send to channel
        success = await send_web_message(
            chat_id=TELEGRAM_CHANNEL,
            text=message,
            parse_mode='Markdown',
            disable_web_page_preview=False
        )

        if success:
            # Mark as published
            await add_published_link(pool, article['link'])
            logger.info(f"Scheduler: Published article: {article['title']}")
            return True
        else:
            logger.error("Scheduler: Failed to publish article")
            raise RuntimeError("Scheduler: Failed to publish article")

    except Exception as e:
        logger.error(f"Scheduler: Error during post publication: {e}", exc_info=True)
        return False
