from typing import List, Dict, Optional
import logging
from .llm_utils import generate_theme_description, generate_article_summary, should_exclude_article

logger = logging.getLogger(__name__)

async def generate_summary(theme: str, articles: List[Dict]) -> str:
    """
    Generates a summary for a given theme based on a list of articles.
    Uses LLM to generate a coherent and informative summary.
    """
    if not articles:
        return f"–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π –ø–æ —Ç–µ–º–µ '{theme}'."
    
    try:
        # Generate theme description
        theme_desc = await generate_theme_description(theme)
        
        # Filter out unwanted articles
        filtered_articles = [a for a in articles if not should_exclude_article(a)]
        
        if not filtered_articles:
            return (
                f"üìÖ *{theme}*\n\n"
                f"{theme_desc}\n\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–µ –Ω–∞—à–ª–æ—Å—å –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å—Ç–∞—Ç–µ–π –ø–æ —Ç–µ–º–µ. "
                "–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ –∑–∞ –Ω–æ–≤—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏!"
            )
        
        # Limit to top 5 articles for the summary
        top_articles = filtered_articles[:5]
        
        # Generate summaries for each article
        article_summaries = []
        for article in top_articles:
            summary = await generate_article_summary(article)
            article_summaries.append({
                'title': article['title'],
                'summary': summary,
                'link': article.get('link', '')
            })
        
        # Format the final summary
        summary_parts = [
            f"üìÖ *{theme}*\n\n"
            f"{theme_desc}\n\n"
            "üìö *–ì–ª–∞–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ–¥–µ–ª–∏:*\n\n"
        ]
        
        for i, article in enumerate(article_summaries, 1):
            summary_parts.append(
                f"{i}. *{article['title']}*\n"
                f"{article['summary']}\n"
                f"üîó [–ß–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—å—é]({article['link']})\n"
            )
        
        summary_parts.append(
            "\n–ß—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ –≤–∞–º –±—ã–ª–æ –Ω–∞–∏–±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ? "
            "–ö–∞–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã —Ç–µ–º—ã –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?"
        )
        
        return "\n".join(summary_parts)
        
    except Exception as e:
        logger.error(f"Error generating summary: {e}", exc_info=True)
        # Fallback to simple format if LLM fails
        return (
            f"üìÖ *{theme}*\n\n"
            "–í–æ—Ç —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –Ω–∞—à–ª–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ:\n\n" +
            "\n\n".join(
                f"üìå *{a['title']}*\nüîó [–ß–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—å—é]({a.get('link', '')})"
                for a in articles[:5]
            )
        )
